import time
import logging
import os
from aiogram import Bot, Dispatcher, executor,types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import markups as nav
import random

TOKEN = "1230365437:AAHUmihZzRCdsRcypjmmWUrBNDFzlHtRzmg"


list_of_stick = ('CAACAgIAAxkBAAEGuWJjkLtcWEB11Dlm2HaIXpMT28obAwACkBUAArTlyUvP28AHDr-D6SsE',
                 'CAACAgIAAxkBAAEGuWBjkLtVabpDWiwENj9dhCA_ua4JjgAC_hYAAhSpyEuADLjmWSoaqysE',
                 'CAACAgIAAxkBAAEGuVxjkLtQYsDvholaFmzjZDr8LVh1OAACiRUAAtI30Uvvk9YteS5JbCsE',
                 'CAACAgIAAxkBAAEGuVljkLtKwr4eQstcJrIB81LLLfMHMAACXxMAAi5eyEvZq78wYISWMysE',
                 'CAACAgIAAxkBAAEGuVhjkLtJqG45uAq5iWwlnG1_C0CNTwACzRMAAl6zyEvD5PzG428z7ysE',
                 'CAACAgIAAxkBAAEGuWxjkLvVlueF4Cps2bP_gAW1SuzfBwACuBMAAgZ_8EsdPfG8O_wkPisE')


storage = MemoryStorage
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage = MemoryStorage())


class ReminderStates(StatesGroup):
    textRemind = State()
    timeRemind = State()

@dp.message_handler(commands=["help"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name
    await message.reply(f"{user_full_name}, –≤ —ç—Ç–æ–º –±–æ—Ç–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –∏ –∫–∞–∫–æ–µ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫.\n"
                        f"<b>–ò —Ç–∞–∫ –Ω–∞—á–Ω–µ–º –ø–æ–∂–∞–ª—É–π —Å –∫–æ–º–∞–Ω–¥:</b>\n"
                        f"–ï—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /start, –æ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –µ—Å–ª–∏ –Ω–∞–¥–æ –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.\n"
                        f"–¢–∞–∫ –∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /links, –æ–Ω–∞ –≤—ã–≤–æ–∏—Ç –¥–≤–µ Inline –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ VK –∏ –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞.\n"
                        f"<b>–¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–µ—Ä–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:</b>\n"
                        f"<i>–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞</i> –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ', –æ–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9999.\n"
                        f"<i>–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞</i> –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞', —á—Ç–æ –æ–Ω–∞ –¥–µ–ª–∞–µ—Ç, —Å–µ–∫—Ä–µ—Ç (—É–∑–Ω–∞–π —Å–∞–º)\n"
                        f"<i>–¢—Ä–µ—Ç—å—è –∫–Ω–æ–ø–∫–∞</i> –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', –æ–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ü–æ–∫–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)\n"
                        f"<i>–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞</i> –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', –ø–æ –Ω–∞–∂–∞—Ç–∏—é –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ –æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ",
                        reply_markup = nav.mainMenu, parse_mode="html")



@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
                           reply_markup=nav.mainMenu)

@dp.message_handler(lambda msg: msg.text == 'üóì–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
async def text_create(message: types.Message) -> None:
    await message.reply('–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç!',
                        reply_markup=nav.get_cancel_kb())
    await ReminderStates.textRemind.set()  # –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

@dp.message_handler(state=ReminderStates.textRemind)
async def load_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['remind'] = message.text

    await message.reply('–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? ')
    await ReminderStates.next() # –ü–æ–º–µ–Ω—è–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å —Ñ–æ—Ç–æ –∏ –∏–º–µ–Ω–µ–º

@dp.message_handler(state=ReminderStates.timeRemind)
async def load_age(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['timeRemind'] = message.text
        await message.answer('–ì–æ—Ç–æ–≤–æ, –í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - {data["remind"]}.\n–í—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å - {data["timeRemind"]} –º–∏–Ω—É—Ç.',
                               reply_markup=nav.mainMenu)
    await state.finish()






@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}!", reply_markup = nav.mainMenu)

# Inline BUTTON
urlkb = InlineKeyboardMarkup(row_width=2)
btn_inline1 = InlineKeyboardButton(text='VK', url='https://vk.com/w1lli21')
btn_inline2 = InlineKeyboardButton(text='GitHub', url='https://github.com/Tr1zel/MooDuck_Bot')
urlkb.add(btn_inline1, btn_inline2)

# –≤—ã–∑–æ–≤ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(commands=['links'])
async def url_commands(message: types.Message):
    await message.answer('–°—Å—ã–ª–æ—á–∫–∏: ', reply_markup=urlkb)



@dp.message_handler()
async def bot_message(message: types.Message):
    #await bot.send_message(message.from_id, message.text)
    if message.text == 'üé≤–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        await bot.send_message(message.from_id, '–í–∞—à–µ —á–∏—Å–ª–æ: ' + str(random.randint(0,9999)))
    elif message.text == '‚è™–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_id, '‚è™–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= nav.mainMenu)
    # elif message.text == '‚û°–î—Ä—É–≥–æ–µ':
    #     await bot.send_message(message.from_id, '‚û°–î—Ä—É–≥–æ–µ', reply_markup= nav.otherMenu)
    elif message.text == '‚Ñπ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await bot.send_message(message.from_id, '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –ª—É—á—à–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–∞ —Å–≤–µ—Ç–µ')
    #elif message.text == 'üóì–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        # await message.reply('–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç!',
        #                     reply_markup=nav.get_cancel_kb())
        # await ReminderStates.textRemind.set()       # –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¢–µ–∫—Å—Ç –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    elif message.text == '–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞üôÉ':
        await message.answer('–î–µ—Ä–∂–∏ C–æ–ª–Ω—ã—à–∫–æ!üòú')
        await bot.send_sticker(message.from_id, sticker=(random.choice(list_of_stick)))
    else:
        await message.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')




if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
