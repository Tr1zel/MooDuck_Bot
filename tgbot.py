import time
import logging
import os
from aiogram import Bot, Dispatcher, executor,types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import markups as nav
import random

TOKEN = "1230365437:AAHUmihZzRCdsRcypjmmWUrBNDFzlHtRzmg"

storage = MemoryStorage
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage = MemoryStorage())



class ProfileStatesGroup(StatesGroup):
    photo = State()
    name = State()
    age = State()
    desc = State()

@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', reply_markup=nav.get_kb())



@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}!", reply_markup = nav.mainMenu)



#inline BUTTON
urlkb = InlineKeyboardMarkup(row_width=2)
btn_inline1 = InlineKeyboardButton(text='youtube', url='https://www.youtube.com/')
btn_inline2 = InlineKeyboardButton(text='Blue tracktor', url='https://www.youtube.com/watch?v=PhrBRUju2XE')
urlkb.add(btn_inline1, btn_inline2)

@dp.message_handler(commands=['—Å—Å—ã–ª–æ—á–∫–∏'])
async def url_commands(message: types.Message):
    await message.answer('–°—Å—ã–ª–æ—á–∫–∏: ', reply_markup=urlkb)


@dp.message_handler(commands=['create'])
async def cmd_create(message: types.Message) -> None:
    await message.reply('–î–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Å–∫–∏–Ω—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
                        reply_markup=nav.get_cancel_kb())
    await ProfileStatesGroup.photo.set()  # –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è

@dp.message_handler(lambda message: not message.photo, state=ProfileStatesGroup.photo)
async def check_photo(message: types.Message):      # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∏ —Ñ–æ—Ç–æ
    await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!') #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è



@dp.message_handler(content_types=['photo'], state=ProfileStatesGroup.photo)
async def load_photo(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id

    await message.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏ —Å–≤–æ–µ –∏–º—è!')
    await ProfileStatesGroup.next() # –ü–æ–º–µ–Ω—è–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å —Ñ–æ—Ç–æ

@dp.message_handler(lambda message: not message.text.isdigit() or float(message.text) > 100, state=ProfileStatesGroup.age)
async def check_photo(message: types.Message):      # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç(—è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ–º –∏ –Ω–µ –±–æ–ª—å—à–µ 100)

@dp.message_handler(state=ProfileStatesGroup.name)
async def load_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text

    await message.reply('C–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? ')
    await ProfileStatesGroup.next() # –ü–æ–º–µ–Ω—è–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å —Ñ–æ—Ç–æ –∏ –∏–º–µ–Ω–µ–º


@dp.message_handler(state=ProfileStatesGroup.age)
async def load_age(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['age'] = message.text

    await message.reply('–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ!')
    await ProfileStatesGroup.next()



@dp.message_handler(state=ProfileStatesGroup.desc)
async def load_desc(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['desc'] = message.text
        await message.answer('–ì–æ—Ç–æ–≤–æ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=data['photo'],
                             caption=f"{data['name']}, {data['age']}\n{data['desc']}")
    await state.finish()





@dp.message_handler()
async def bot_message(message: types.Message):
    #await bot.send_message(message.from_id, message.text)
    if message.text == 'üé≤–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        await bot.send_message(message.from_id, '–í–∞—à–µ —á–∏—Å–ª–æ: ' + str(random.randint(0,9999)))
    elif message.text == '‚è™–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_id, '‚è™–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= nav.mainMenu)
    elif message.text == '‚û°–î—Ä—É–≥–æ–µ':
        await bot.send_message(message.from_id, '‚û°–î—Ä—É–≥–æ–µ', reply_markup= nav.otherMenu)
    elif message.text == '‚Ñπ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await bot.send_message(message.from_id, '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –ª—É—á—à–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–∞ —Å–≤–µ—Ç–µ')
    elif message.text == 'üóì–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        await bot.send_message(message.from_id, '–î–æ–ø–∏–ª–∏–≤–∞–µ—Ç—Å—èü•∞')
    elif message.text == '–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞üôÉ':
        await message.answer('–î–µ—Ä–∂–∏ –ú—Ä–∞–∑—å!')
        await bot.send_sticker(message.from_id, sticker='CAACAgIAAxkBAAEGqbdjizWjPJb7wiNzJwQoq3wAAV5zAicAAjkBAAKgMB835pn0RKG2LWIrBA')
    else:
        await message.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')




if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)